<HBProfile>
	<Name>Activate Functions</Name>
	<QuestOrder>
		<!--__CompiledBatchClass__-->
		<Code File="RunCode" Type="Definition"><![CDATA[
private static Styx.TreeSharp.Composite _activateFunctionsComposite;

private static readonly Stopwatch _mainPulseTimer = new Stopwatch();

public __CompiledBatchClass__()
{
	// Just in case button already exists for some reason.
	System.Windows.Application.Current.Dispatcher.Invoke(ButtonManager.RemoveButton);
	System.Windows.Application.Current.Dispatcher.Invoke(ButtonManager.AddButton);

	// Tell Honorbuddy that the functions are running.
	AppDomainData.Set("QuestingProfiles_FunctionsEnabled", true);
	AppDomainData.Set("QuestingProfiles_AntiStuckToggle", true);
	AppDomainData.Set("Questing_AFKModeWhitelist", new List<uint>());

	TreeHooks.Instance.InsertHook(
		"Questbot_Main",
		0,
		_activateFunctionsComposite ?? (_activateFunctionsComposite = new CommonBehaviors.Actions.ActionRunCoroutine(ctx => FunctionPulser())));

	// Rate, Looting, and Treasure Filters
	Targeting.Instance.IncludeTargetsFilter += RareHunter.IncludeRareTargetingFilter;
	LootTargeting.Instance.RemoveTargetsFilter += CustomLooting.IncludeCustomLootingFilter;

	Logging.OnLogMessage += LogMonitorFunction;


	FancyLog.WriteBlue("TEST: ", "Last Profile: " + CharacterSettings.Instance.LastUsedPath);

	if (string.IsNullOrWhiteSpace(CharacterSettings.Instance.LastUsedPath) || CharacterSettings.Instance.LastUsedPath.Contains("Activate Functions"))
	{
		FancyLog.WriteBlue("TEST: ", "Loading auto loader");
		LoadProfile(@"..\1-110 Autoloader.xml");
	}
	else
	{
		FancyLog.WriteBlue("TEST: ", "Loading " + CharacterSettings.Instance.LastUsedPath);
		ProfileManager.LoadNew(CharacterSettings.Instance.LastUsedPath, false);
	}
}

private static void LoadProfile(string path)
{
	var profile = GetNewPath(path);
	if (!IsStoreProfile(profile) && !File.Exists(profile))
	{
		// TODO: Change to red and stop the bot.
		FancyLog.WriteBlue("[Error]: ", "Profile does not exist");
		return;
	}

	FancyLog.WriteBlue("[Functions]: ", "Loading " + profile);
	ProfileManager.LoadNew(profile);
}

private static string GetNewPath(string path)
{
	if (IsStoreProfile(path))
		return Slashify(path);

	var currentProfile = ProfileManager.XmlLocation;
	if (IsStoreProfile(currentProfile))
		return Slashify(currentProfile + "/../" + path);

	// Convert path name to absolute, and canonicalize it...
	var absolutePath = Path.Combine(Path.GetDirectoryName(currentProfile), path);
	absolutePath = Path.GetFullPath(absolutePath);
	var canonicalPath = new Uri(absolutePath).LocalPath;
	return Slashify(canonicalPath);
}

private static bool IsStoreProfile(string path)
{
	return path.StartsWith("store://");
}

// Converts all slashes to back-slashes if path is local; otherwise converts all back-slashes to slashes
private static string Slashify(string path)
{
	return IsStoreProfile(path) ? path.Replace(@"\", "/") : path.Replace("/", @"\");
}

private async Task<bool> FunctionPulser()
{
	if (!_mainPulseTimer.IsRunning)
		_mainPulseTimer.Start();
	if (StyxWoW.Me == null || !StyxWoW.Me.IsValid || Me.InVehicle || Me.OnTaxi)
		return false;

	if (Settings.Instance.AfkMode && MerchantFrame.Instance.IsVisible)
		await AfkMode.Run();
	if (Settings.Instance.FindTreasureChests && TreasureHunter._treasureFunctionRunning && BotPoi.Current.Type != PoiType.Kill
		&& BotPoi.Current.Type != PoiType.Loot && Me.IsAlive && !Me.IsActuallyInCombat)
	{
		await TreasureHunter.Run();
		return true;
	}

	if (_mainPulseTimer.Elapsed < TimeSpan.FromSeconds(5))
		return false;
	_mainPulseTimer.Restart();

	if (Settings.Instance.AfkMode)
		await AfkMode.Run();
	if (Settings.Instance.SanityEngine)
		SanityEngine.Run();
	if (Settings.Instance.UseAntiStuck)
		await AntiStuck.StuckHandler();
	if (Settings.Instance.UseActiveVendoring)
		ActiveVendoring.ActiveVendorLogic();
	if (Settings.Instance.FindTreasureChests)
		await TreasureHunter.Run();

	return false;
}

private async void LogMonitorFunction(System.Collections.ObjectModel.ReadOnlyCollection<Logging.LogMessage> messages)
{
	foreach (Logging.LogMessage message in messages)
	{
		if (message.Message.Contains("Bot stopping!"))
		{
			if (message.Message.Contains("User pressed the stop button") || message.Message.Contains("Nothing more to do"))
			{
				Stats.OutputToLog();
				TreeHooks.Instance.RemoveHook("Questbot_Main", _activateFunctionsComposite);
				Targeting.Instance.IncludeTargetsFilter -= RareHunter.IncludeRareTargetingFilter;
				LootTargeting.Instance.RemoveTargetsFilter -= CustomLooting.IncludeCustomLootingFilter;
				System.Windows.Application.Current.Dispatcher.Invoke(ButtonManager.RemoveButton);
				AppDomainData.Set("QuestingProfiles_FunctionsEnabled", false);

				FancyLog.WriteYellow("[Function Engine]: ", "User stopped the bot or there's nothing else to do. Shutting down.");
				Logging.OnLogMessage -= LogMonitorFunction;
			}

			if (!Settings.Instance.SanityEngine)
				return;

			Stats.InsaneCounter++;

			if (message.Message.Contains("after 20 seconds"))
			{
				FancyLog.WriteYellow(
					"[Sanity Engine]: ",
					"The bot was shutdown by a quest PickUp/TurnIn failure! Attempting to fix this..");
				Lua.DoString("ReloadUI();");
				await Task.Delay(5000);
				TreeRoot.Start();
			}

			if (message.Message.Contains("Fatal error"))
			{
				FancyLog.WriteYellow("[Sanity Engine]: ", "Bot was stopped due to a fatal error! Attempting to start it again.");
				await Task.Delay(2000);
				TreeRoot.Start();
			}
		}
	}
}
]]></Code>
		<!--END __CompiledBatchClass__-->
		<!--ActiveVendoring-->
		<Code File="RunCode" Type="Definition"><![CDATA[
public static class ActiveVendoring
{
	public static void ActiveVendorLogic()
	{
		double bagslotTotal = StyxWoW.Me.FreeNormalBagSlots + StyxWoW.Me.BagItems.Count();
		double bagslotPercentageDeficit = Math.Round(StyxWoW.Me.FreeNormalBagSlots / bagslotTotal * 100);
		WoWUnit nearbyVendor = ObjectManager.GetObjectsOfType<WoWUnit>()
											.FirstOrDefault(
												x => x.IsAlive && x.IsFriendly && x.IsAnyVendor && x.DistanceSqr <= 60f * 60f);

		if (Vendors.ForceSell || !(bagslotPercentageDeficit < 35) || nearbyVendor == null)
			return;

		ProfileManager.CurrentProfile.VendorManager.ForcedVendors.Add(
			new Vendor(
				(int)nearbyVendor.Entry,
				nearbyVendor.Name,
				Vendor.VendorType.Sell,
				nearbyVendor.Location,
				NavType.Run));
		FancyLog.WriteYellow("> [Active Vendoring]: ", "Forcing the bot to vendor since we're near a vendor.");
		Vendors.ForceSell = true;
		Stats.TimesForceVendored++;
	}
}
]]></Code>
		<!--END ActiveVendoring-->
		<!--AfkMode-->
		<Code File="RunCode" Type="Definition"><![CDATA[
public static class AfkMode
{
	private static LocalPlayer Me => StyxWoW.Me;

	public static async Task<bool> Run()
	{
		if (QuestLog.Instance.GetAllQuests().Count() >= 20)
		{
			FancyLog.WriteYellow("[AFK Mode]: ", "Cleaning up questlog of low level quests since it is almost full.");
			int levelDeficit = Me.Level - 3;

			foreach (PlayerQuest quest in QuestLog.Instance.GetAllQuests())
			{
				if (quest.Level >= levelDeficit)
					continue;

				FancyLog.WriteYellow("[AFK Mode]: ", $"Abandoning quest: {quest.Name}");
				QuestLog.Instance.AbandonQuestById(quest.Id);
			}

			Stats.QuestlogCleanups++;
		}

		if (!Me.IsAlive || Me.IsActuallyInCombat)
			return false;

		List<WoWItem> inventoryManager = Me.BagItems;

		if (inventoryManager.Any(item => item.IsOpenable))
		{
			IEnumerable<WoWItem> openList = inventoryManager.Where(item => item.IsOpenable);
			foreach (WoWItem openMe in openList)
			{
				FancyLog.WriteYellow("[AFK Mode]: ", $"Opening > {openMe.Name}.");
				openMe.Use();
				await Coroutine.Wait(1000, () => LootFrame.Instance.IsVisible);
				LootFrame.Instance.LootAll();
				await Coroutine.Wait(3000, () => !LootFrame.Instance.IsVisible);
				Stats.ItemsOpened++;
			}
		}

		if (inventoryManager.Any(
			item => item.ItemInfo.SellPrice == 00 && item.GetEffect(0) == null
					&& (item.ItemInfo.Bond == WoWItemBondType.None
						|| item.ItemInfo.BeginQuestId != 0 && item.ItemInfo.RequiredLevel < Me.Level - 5)
					&& !AppDomainData.AfkModeWhitelist.Contains(item.Entry)))
		{
			IEnumerable<WoWItem> deleteList = inventoryManager.Where(
				item => item.ItemInfo.SellPrice == 00 && item.GetEffect(0) == null
						&& (item.ItemInfo.Bond == WoWItemBondType.None
							|| item.ItemInfo.BeginQuestId != 0 && item.ItemInfo.RequiredLevel < Me.Level - 5));
			foreach (WoWItem deleteMe in deleteList)
			{
				FancyLog.WriteYellow("[AFK Mode]: ", $"Force deleting > {deleteMe.Name}.");
				deleteMe.PickUp();
				Lua.DoString("DeleteCursorItem();");
				Stats.ItemsDeleted++;
			}
		}

		if (MerchantFrame.Instance.IsVisible)
		{
			IEnumerable<WoWItem> sellList =
				inventoryManager.Where(item => item.ItemInfo.SellPrice != 0 && !AppDomainData.AfkModeWhitelist.Contains(item.Entry));
			foreach (WoWItem sellMe in sellList)
			{
				if (!MerchantFrame.Instance.IsVisible)
					break;
				if (!sellMe.IsValid)
					continue;

				FancyLog.WriteYellow("[AFK Mode]: ", $"Force selling > {sellMe.Name}.");
				sellMe.UseContainerItem();
				await Coroutine.Sleep(500);
				Stats.ItemsSold++;
			}
		}

		return false;
	}
}
]]></Code>
		<!--END AfkMode-->
		<!--AntiStuck-->
		<Code File="RunCode" Type="Definition"><![CDATA[
public static class AntiStuck
{
	private static readonly Stopwatch _antiStuckTimerLongTerm = new Stopwatch();

	private static readonly bool _useAntiStuck = true;

	private static Vector3 LastPointLong = new Vector3(0f, 0f, 0f);

	private static Vector3 LastPointShort = new Vector3(0f, 0f, 0f);

	public static async Task<bool> StuckHandler()
	{
		if (AppDomainData.AntiStuckToggle == null || AppDomainData.AntiStuckToggle == false)
			return false;

		if (!_antiStuckTimerLongTerm.IsRunning)
			_antiStuckTimerLongTerm.Start();

		if (_antiStuckTimerLongTerm.Elapsed > TimeSpan.FromMinutes(5))
		{
			_antiStuckTimerLongTerm.Restart();
			if (IsStuck(false))
			{
				WoWItem hearthItem = null;

				if (StyxWoW.Me.CurrentMap.ExpansionId == 5 && StyxWoW.Me.BagItems.Any(x => x.Entry == 110560)) // WoD Hearth
					hearthItem = StyxWoW.Me.BagItems.FirstOrDefault(x => x.Entry == 110560);
				else if (StyxWoW.Me.CurrentMap.ExpansionId == 6
						 && StyxWoW.Me.BagItems.Any(x => x.Entry == 140192)) // Broken Isles Dalaran Hearth
					hearthItem = StyxWoW.Me.BagItems.FirstOrDefault(x => x.Entry == 140192);
				else
					hearthItem = StyxWoW.Me.BagItems.FirstOrDefault(x => x.Entry == 6948); // Normal Hearth

				if (hearthItem == null)
					return false;

				uint currentMapId = StyxWoW.Me.MapId;

				Stats.LongTermStucks++;
				FancyLog.WriteYellow("[Anti-Stuck]: ", "Long-term stuck detection activated!");
				await CommonCoroutines.StopMoving();
				await CommonCoroutines.LandAndDismount();

				if (hearthItem.CooldownTimeLeft != TimeSpan.Zero)
				{
					FancyLog.WriteYellow("[Anti-Stuck]: ", "Awaiting Hearthstone cooldown before attempting hearth!");
					await Coroutine.Wait(901000, () => hearthItem.CooldownTimeLeft == TimeSpan.Zero);
				}
				hearthItem.Interact();
				await Coroutine.Sleep(11500);
				FancyLog.WriteYellow("[Anti-Stuck]: ", "Reloading profile.");

				if (StyxWoW.Me.MapId != currentMapId)
				{
					FancyLog.WriteYellow("[Anti-Stuck]: ", "Our map location has changed, loading the autoloaders.");
					string profilePath = Path.GetDirectoryName(ProfileManager.XmlLocation) + "/../../1-110 Autoloader.xml";
					string absolutePath = Path.GetFullPath(profilePath);
					ProfileManager.LoadNew(absolutePath);
				}
				else
					ProfileManager.LoadNew(ProfileManager.XmlLocation);

				await Coroutine.Sleep(5000);
				_antiStuckTimerLongTerm.Restart();
				return true;
			}
			return false;
		}

		if (IsStuck(true))
		{
			if (!StyxWoW.Me.IsMoving)
			{
				LastPointShort = new Vector3(0f, 0f, 0f);
				return false;
			}

			Stats.ShortTermStucks++;
			FancyLog.WriteYellow("[Anti-Stuck]: ", "Short-term stuck detection activated!");
			await CommonCoroutines.StopMoving();
			Navigator.Clear();
			if (StyxWoW.Me.IsFlying)
			{
				WoWMovement.Move(WoWMovement.MovementDirection.Backwards, TimeSpan.FromMilliseconds(2000));
				BlackspotManager.AddBlackspot(new Blackspot(LastPointShort, 5, 5));
				await Coroutine.Sleep(2000);
			}
			else
			{
				WoWMovement.Move(WoWMovement.MovementDirection.Backwards, TimeSpan.FromMilliseconds(1000));
				BlackspotManager.AddBlackspot(new Blackspot(LastPointShort, 5, 5));
			}
			return true;
		}
		return false;
	}

	private static bool IsStuck(bool shortTerm)
	{
		if (!_useAntiStuck)
			return false;
		if (StyxWoW.Me.IsDead)
			return false;
		if (StyxWoW.Me.IsActuallyInCombat)
			return false;
		if (StyxWoW.Me.HasAura("Resurrection Sickness"))
			return false;

		Vector3 currentPoint = StyxWoW.Me.Location;

		if (shortTerm)
		{
			bool isStuckShort = StyxWoW.Me.Location.DistanceSquared(LastPointShort) <= 5f * 5f;
			LastPointShort = currentPoint;
			return isStuckShort;
		}
		if (!shortTerm)
		{
			bool isStuckLong = StyxWoW.Me.Location.DistanceSquared(LastPointLong) < 10f * 10f;
			LastPointLong = currentPoint;
			return isStuckLong;
		}
		return false;
	}
}
]]></Code>
		<!--END AntiStuck-->
		<!--AppDomainData-->
		<Code File="RunCode" Type="Definition"><![CDATA[
public static class AppDomainData
{
	public static List<uint> AfkModeWhitelist => Get<List<uint>>("Questing_AFKModeWhitelist");

	public static bool? AntiStuckToggle => (bool?)AppDomain.CurrentDomain.GetData("QuestingProfiles_AntiStuckToggle");

	public static T Get<T>(string name)
	{
		return (T)AppDomain.CurrentDomain.GetData(name);
	}

	public static void Set(string name, object data)
	{
		AppDomain.CurrentDomain.SetData(name, data);
	}
}
]]></Code>
		<!--END AppDomainData-->
		<!--ButtonManager-->
		<Code File="RunCode" Type="Definition"><![CDATA[
public static class ButtonManager
{
	private static System.Windows.Controls.Button s_profileConfigButton;

	public static void AddButton()
	{
		s_profileConfigButton = new System.Windows.Controls.Button
		{
			Name = "btnProfileConfig",
			Content = "Profile Config",
			HorizontalAlignment = System.Windows.HorizontalAlignment.Right,
			VerticalAlignment = System.Windows.VerticalAlignment.Bottom,
			Width = 120,
			Height = 25,
			Background = new SolidColorBrush(System.Windows.Media.Color.FromRgb(132, 98, 199)),
			Margin = new System.Windows.Thickness(0, 0, 136, 26)
		};

		s_profileConfigButton.Click += (sender, args) => SettingsView.ShowDialog();

		var hbGrid = (System.Windows.Controls.Grid)((Honorbuddy.MainWindow)System.Windows.Application.Current.MainWindow).Content;
		hbGrid.Children.Add(s_profileConfigButton);
	}

	public static void RemoveButton()
	{
		var hbGrid = (System.Windows.Controls.Grid)((Honorbuddy.MainWindow)System.Windows.Application.Current.MainWindow).Content;
		System.Windows.Controls.Button profileConfigButton = hbGrid.Children.OfType<System.Windows.Controls.Button>().FirstOrDefault(btn => btn.Name == "btnProfileConfig");
		if (profileConfigButton != null)
			hbGrid.Children.Remove(s_profileConfigButton);
	}
}
]]></Code>
		<!--END ButtonManager-->
		<!--CustomLooting-->
		<Code File="RunCode" Type="Definition"><![CDATA[
public static class CustomLooting
{
	private static readonly List<WoWGuid> TimerBlacklist = new List<WoWGuid>();

	public static void IncludeCustomLootingFilter(List<WoWObject> lootUnits)
	{
		if (!Settings.Instance.CustomLooting)
			return;

		if (lootUnits.Any(unit => !TimerBlacklist.Contains(unit.Guid) && unit is WoWUnit && unit.ToUnit().Lootable))
		{
			foreach (WoWObject blacklistUnit in lootUnits)
			{
				if (!TimerBlacklist.Contains(blacklistUnit.Guid) && blacklistUnit is WoWUnit && blacklistUnit.ToUnit().Lootable)
					TimerBlacklist.Add(blacklistUnit.Guid);
			}
			Stats.TimeSaved = Stats.TimeSaved.Add(TimeSpan.FromMilliseconds(2623));
		}

		lootUnits.RemoveAll(
			lootUnit => lootUnit is WoWUnit && lootUnit.ToUnit().Classification != WoWUnitClassificationType.Rare
						&& !IsNeededForQuestObjective(lootUnit.ToUnit()));
	}

	public static bool IsNeededForQuestObjective(WoWUnit objectiveMob)
	{
		if (StyxWoW.Me.CurrentMap.ExpansionId == 1 || StyxWoW.Me.CurrentMap.ExpansionId == 2)
			return true; // Ignore Outlands and Northrend due to creature cache issues.
		foreach (PlayerQuest playerQuest in QuestLog.Instance.GetAllQuests())
		{
			if (playerQuest.IsCompleted || playerQuest.IsFailed)
				continue;

			List<Quest.QuestObjective> mainObjectives = playerQuest.GetObjectives();
			uint[] normalObjectives = playerQuest.NormalObjectiveRequiredCounts;

			List<uint> allObjectiveIds = mainObjectives.Select(objective => objective.ID).ToList();
			allObjectiveIds.AddRange(normalObjectives);

			foreach (uint objective in allObjectiveIds)
			{
				if (!objectiveMob.GetCachedInfo(out WoWCache.CreatureCacheEntry cacheEntry))
					continue;
				if (cacheEntry.QuestItems.ToList().Contains(objective))
					return true;
			}
		}
		return false;
	}
}
]]></Code>
		<!--END CustomLooting-->
		<!--FancyLog-->
		<Code File="RunCode" Type="Definition"><![CDATA[
public static class FancyLog
{
	public static void WriteBlue(string header, string message)
	{
		Bots.Professionbuddy.PBLog.Log(System.Windows.Media.Colors.MediumPurple, header, System.Windows.Media.Colors.CornflowerBlue, message);
	}

	public static void WriteYellow(string header, string message)
	{
		Bots.Professionbuddy.PBLog.Log(System.Windows.Media.Colors.MediumPurple, header, System.Windows.Media.Colors.Yellow, message);
	}
}
]]></Code>
		<!--END FancyLog-->
		<!--RareHunter-->
		<Code File="RunCode" Type="Definition"><![CDATA[
public static class RareHunter
{
	private static readonly List<WoWGuid> _rareBlacklist = new List<WoWGuid>();

	public static void IncludeRareTargetingFilter(List<WoWObject> incomingUnits, HashSet<WoWObject> outgoingUnits)
	{
		if (!Settings.Instance.HuntRareMobs)
			return;

		foreach (WoWObject rareUnit in incomingUnits)
		{
			if (!(rareUnit is WoWUnit) || BlackspotManager.IsBlackspotted(rareUnit.Location)
				|| rareUnit.ToUnit().Classification != WoWUnitClassificationType.Rare || rareUnit.ToUnit().IsTagged
				|| !rareUnit.ToUnit().Attackable)
				continue;
			if (!_rareBlacklist.Contains(rareUnit.Guid))
			{
				_rareBlacklist.Add(rareUnit.ToUnit().Guid);
				Stats.RaresKilled++;
				FancyLog.WriteBlue(
					"[Rare Killer]: ",
					$"Rare detected near us!\n	Name     :: {rareUnit.ToUnit().Name}\n	Entry     :: {rareUnit.ToUnit().Entry}\n	Location :: {rareUnit.ToUnit().Location}");
			}
			outgoingUnits.Add(rareUnit);
		}
	}
}
]]></Code>
		<!--END RareHunter-->
		<!--RelayCommand-->
		<Code File="RunCode" Type="Definition"><![CDATA[
public class RelayCommand : System.Windows.Input.ICommand
{
	private readonly Func<bool> _canExecute;

	private readonly Action _execute;

	public RelayCommand(Action execute) : this(execute, null) { }

	public RelayCommand(Action execute, Func<bool> canExecute)
	{
		_execute = execute ?? throw new ArgumentNullException(nameof(execute));
		_canExecute = canExecute;
	}

	public event EventHandler CanExecuteChanged;

	public bool CanExecute(object parameter)
	{
		return _canExecute == null || _canExecute();
	}

	public void Execute(object parameter)
	{
		_execute();
	}
}
]]></Code>
		<!--END RelayCommand-->
		<!--SanityEngine-->
		<Code File="RunCode" Type="Definition"><![CDATA[
public static class SanityEngine
{
	public static void Run()
	{
		if (QuestFrame.Instance.IsVisible && QuestFrame.Instance.CurrentShownQuestId != 0
			&& Lua.GetReturnVal<bool>("return QuestFrameCompleteButton:IsVisible();", 0)
			&& !Lua.GetReturnVal<bool>("return QuestFrameCompleteButton:IsEnabled();", 0))
		{
			//TurnIn bug where if the bot tries turning in the quest at the immediate second that the quest is completed, the quest will show on the frame as incomplete even though it is.
			QuestFrame.Instance.Close();
			FancyLog.WriteBlue("> [Sanity Engine]: ", "Sticky quest frame detected, closing it.");
			Stats.InsaneCounter++;
		}
		if (QuestFrame.Instance.IsVisible && QuestFrame.Instance.CurrentShownQuestId == 0
			&& Lua.GetReturnVal<bool>("return QuestFrameAcceptButton:IsVisible()", 0))
		{
			//Ghost frame bug.  Where the bot tries picking up a quest but there is no quest description, title or text.
			QuestFrame.Instance.Close();
			FancyLog.WriteBlue("> [Sanity Engine]: ", "Sticky quest frame detected, closing it.");
			Stats.InsaneCounter++;
		}
		if (TaxiFrame.Instance.IsVisible && (BotPoi.Current.Type == PoiType.QuestTurnIn || BotPoi.Current.Type == PoiType.QuestPickUp)
			&& !StyxWoW.Me.IsMoving)
		{
			//FlightMaster-QuestGiver bug.  Where if the quest giver is also a flight master and the bot leaves the taxi frame open while trying to turn in or pick up a quest.
			TaxiFrame.Instance.Close();
			FancyLog.WriteBlue("> [Sanity Engine]: ", "Sticky quest frame detected, closing it.");
			Stats.InsaneCounter++;
		}
	}
}
]]></Code>
		<!--END SanityEngine-->
		<!--Settings-->
		<Code File="RunCode" Type="Definition"><![CDATA[
public class Settings : GarrisonBuddy.JsonSettings<Settings>
{
	public Settings() : base(Path.Combine(CharacterSettingsDirectory, "QuestSettings.json"))
	{
		Load();
	}

	/// <summary>
	///     Sells everything in your bags when visiting a vendor, deletes items that can't be sold, and opens openable items.
	///     Also keeps the quest log clean so it doesn't get full and reacts to players around you.
	/// </summary>
	public bool AfkMode { get; set; } = false;

	/// <summary>
	///     Only loot quest-related NPCs.  Does NOT work in Outland and Northrend expansion zones.
	/// </summary>
	public bool CustomLooting { get; set; } = false;

	public System.Collections.ObjectModel.ObservableCollection<string> DeleteItems { get; set; } = new System.Collections.ObjectModel.ObservableCollection<string>();

	/// <summary>
	///     Actively looks for treasure chests around the player and loots them.
	///     Treasure chests typically give you a large amount of experience and a blue item.
	/// </summary>
	public bool FindTreasureChests { get; set; } = true;

	public System.Collections.ObjectModel.ObservableCollection<string> GuildBankItems { get; set; } = new System.Collections.ObjectModel.ObservableCollection<string>();

	/// <summary>
	///     Actively kills rares as they are detected near the bot.
	/// </summary>
	public bool HuntRareMobs { get; set; } = true;

	/// <summary>
	///     Looks for bugs and tries to fix them as the bot is running.
	///     Some bugs include sticky quest frames, pick up / turn in quest failures, NPC phasing issues, etc.
	/// </summary>
	public bool SanityEngine { get; set; } = true;

	/// <summary>
	///     Looks for vendors close to the player and will use them if your bags are under a set percentage of remaining slots.
	///     This will prevent the bot from leaving a town with a low bagslot count as often the bot will do this, and end up
	///     running back to town before quests are complete which wastes time.
	/// </summary>
	public bool UseActiveVendoring { get; set; } = true;

	/// <summary>
	///     Utilizes a short-term and long-term custom antistuck method.
	///     Short-term antistuck will make the bot back off of the stuck location and blackspot it from the navigation system
	///     so the bot will calculate a new path.
	///     Long-term antistuck will make the bot use the Hearthstone(s) to get out of the location and will reload the
	///     profile.
	/// </summary>
	public bool UseAntiStuck { get; set; } = true;
}
]]></Code>
		<!--END Settings-->
		<!--SettingsView-->
		<Code File="RunCode" Type="Definition"><![CDATA[
public static class SettingsView
{
	private const string ViewString = @"
<UserControl 
			 xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation""
			 xmlns:d=""http://schemas.microsoft.com/expression/blend/2008""
			 xmlns:x=""http://schemas.microsoft.com/winfx/2006/xaml""
			 xmlns:mc=""http://schemas.openxmlformats.org/markup-compatibility/2006""
			 xmlns:my=""http://metro.mahapps.com/winfx/xaml/controls""
			 xmlns:questingFunctions=""clr-namespace:Azyul.QuestingFunctions;assembly=Azyul.QuestingFunctions""
			 mc:Ignorable=""d"" d:DataContext=""{d:DesignInstance questingFunctions:SettingsViewModel}"">
	<Grid Width=""500"">
		<Grid.RowDefinitions>
			<RowDefinition Height=""*"" />
			<RowDefinition Height=""*"" />
			<RowDefinition Height=""*"" />
		</Grid.RowDefinitions>

		<Image Grid.Row=""0"" Margin=""0, 0, 0, 5"" Source=""https://cdn.pook.io/questing/header.jpg"" />

		<Grid Grid.Row=""0"" HorizontalAlignment=""Left"" VerticalAlignment=""Top"">
			<Grid.RowDefinitions>
				<RowDefinition Height=""*"" />
				<RowDefinition Height=""*"" />
			</Grid.RowDefinitions>

			<Canvas Grid.Row=""0"" HorizontalAlignment=""Center"" Height=""50"" Width=""50"">
				<Path Fill=""#8C9EFF""
					  Data=""M40,12c0,0-4.585-3.588-10-4l-0.488,0.976C34.408,10.174,36.654,11.891,39,14&#10;&#9;c-4.045-2.065-8.039-4-15-4s-10.955,1.935-15,4c2.346-2.109,5.018-4.015,9.488-5.024L18,8c-5.681,0.537-10,4-10,4s-5.121,7.425-6,22&#10;&#9;c5.162,5.953,13,6,13,6l1.639-2.185C13.857,36.848,10.715,35.121,8,32c3.238,2.45,8.125,5,16,5s12.762-2.55,16-5&#10;&#9;c-2.715,3.121-5.857,4.848-8.639,5.815L33,40c0,0,7.838-0.047,13-6C45.121,19.425,40,12,40,12z M17.5,30c-1.933,0-3.5-1.791-3.5-4&#10;&#9;c0-2.209,1.567-4,3.5-4s3.5,1.791,3.5,4C21,28.209,19.433,30,17.5,30z M30.5,30c-1.933,0-3.5-1.791-3.5-4c0-2.209,1.567-4,3.5-4&#10;&#9;s3.5,1.791,3.5,4C34,28.209,32.433,30,30.5,30z"" />
			</Canvas>
			<Label Grid.Row=""1"" HorizontalAlignment=""Center"" VerticalAlignment=""Top"" Foreground=""#8C9EFF""
				   Content=""Join us on Discord"" />
		</Grid>

		<Grid Grid.Row=""1"">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width=""*"" />
				<ColumnDefinition Width=""*"" />
			</Grid.ColumnDefinitions>
			<Grid.RowDefinitions>
				<RowDefinition Height=""*"" />
				<RowDefinition Height=""*"" />
				<RowDefinition Height=""*"" />
				<RowDefinition Height=""*"" />
			</Grid.RowDefinitions>

			<CheckBox Content=""Use Anti-Stuck"" ToolTip=""Utilizes a short-term and long-term custom antistuck method. \nShort-term antistuck will make the bot back off of the stuck location and blackspot it from the navigation system so the bot will calculate a new path. \nLong-term antistuck will make the bot use the Hearthstone(s) to get out of the location and will reload the profile."" Grid.Column=""0"" Grid.Row=""0"" Margin=""10, 2, 0, 0""
					  IsChecked=""{Binding Settings.UseAntiStuck}"" />

			<CheckBox Content=""Find Treasure Chests"" ToolTip=""Actively looks for treasure chests around the player and loots them. \nTreasure chests typically give you a large amount of experience and a blue item."" Grid.Column=""0"" Grid.Row=""1"" Margin=""10, 2, 0, 0""
					  IsChecked=""{Binding Settings.FindTreasureChests}"" />

			<CheckBox Content=""Custom Looting"" ToolTip=""Only loot quest-related NPCs. \nDoes NOT work in Outland and Northrend expansion zones."" Grid.Column=""0"" Grid.Row=""2""
					  Margin=""10, 2, 0, 0"" IsChecked=""{Binding Settings.CustomLooting}"" />

			<CheckBox Content=""Use Active Vendoring"" ToolTip=""Looks for vendors close to the player and will use them if your bags are under a set percentage of remaining slots. \nThis will prevent the bot from leaving a town with a low bagslot count as often the bot will do this, and end up running back to town before quests are complete which wastes time."" Grid.Column=""0"" Grid.Row=""3"" Margin=""10, 2, 0, 0""
					  IsChecked=""{Binding Settings.UseActiveVendoring}"" />

			<CheckBox Content=""Afk Mode"" ToolTip=""Sells everything in your bags when visiting a vendor, deletes items that can't be sold, and opens openable items. \nAlso keeps the quest log clean so it doesn't get full and reacts to players around you."" Grid.Column=""1"" Grid.Row=""0"" Margin=""10, 2, 0, 0""
					  IsChecked=""{Binding Settings.AfkMode}"" />

			<CheckBox Content=""Sanity Engine"" ToolTip=""Looks for bugs and tries to fix them as the bot is running. \nSome bugs include sticky quest frames, pick up / turn in quest failures, NPC phasing issues, etc."" Grid.Column=""1"" Grid.Row=""1"" Margin=""10, 2, 0, 0""
					  IsChecked=""{Binding Settings.SanityEngine}"" />

			<CheckBox Content=""Hunt Rare Mobs"" ToolTip=""Actively kills rares as they are detected near the bot."" Grid.Column=""1"" Grid.Row=""2"" Margin=""10, 2, 0, 0""
					  IsChecked=""{Binding Settings.HuntRareMobs}"" />
		</Grid>

		<my:MetroAnimatedTabControl Grid.Row=""2"" Margin=""0, 5, 0, 1"" Height=""314"">
			<TabItem Header=""Changelog"">
				<RichTextBox Name=""ChangelogTextBox"" IsReadOnly=""True"" BorderThickness=""0""
							 VerticalScrollBarVisibility=""Auto"" />
			</TabItem>
			<TabItem Header=""Delete Items"" />
			<TabItem Header=""Guild Bank Items"" />
		</my:MetroAnimatedTabControl>
	</Grid>
</UserControl>
";

	public static void ShowDialog()
	{
		var settingsControl = (System.Windows.Controls.UserControl)System.Windows.Markup.XamlReader.Parse(ViewString);
		var viewModel = new SettingsViewModel();
		settingsControl.DataContext = viewModel;

		var window = new MahApps.Metro.Controls.MetroWindow
		{
			ShowIconOnTitleBar = true,
			Title = "Quest Profile Config",
			Content = settingsControl,
			SizeToContent = System.Windows.SizeToContent.WidthAndHeight,
			ResizeMode = System.Windows.ResizeMode.NoResize,
			WindowTransitionsEnabled = true
		};

		System.Windows.Resources.StreamResourceInfo resourceStream =
			System.Windows.Application.GetResourceStream(new Uri("/Honorbuddy;component/Images/HbWasp.ico", UriKind.Relative));
		var bitmap = new System.Windows.Media.Imaging.BitmapImage();
		bitmap.BeginInit();
		bitmap.StreamSource = resourceStream.Stream;
		bitmap.CacheOption = System.Windows.Media.Imaging.BitmapCacheOption.OnLoad;
		bitmap.EndInit();
		bitmap.Freeze();
		window.Icon = bitmap;

		var changelogTextBox = (System.Windows.Controls.RichTextBox)settingsControl.FindName("ChangelogTextBox");
		using (var stream = new MemoryStream(System.Text.Encoding.Default.GetBytes(viewModel.GetChangelog())))
		{
			changelogTextBox.Selection.Load(stream, System.Windows.DataFormats.Rtf);
		}

		window.Closed += (sender, args) =>
		{
			viewModel.Settings.Save();
			//FancyLog(Colors.MediumPurple, ""> [Function Engine] "", Colors.Yellow, ""User settings saved!"");
		};

		window.ShowDialog();
	}
}
]]></Code>
		<!--END SettingsView-->
		<!--SettingsViewModel-->
		<Code File="RunCode" Type="Definition"><![CDATA[
public class SettingsViewModel
{
	public Settings Settings => Settings.Instance;

	public string GetChangelog()
	{
		// TODO: Change to async
		using (var client = new System.Net.WebClient())
		{
			return client.DownloadString("https://cdn.pook.io/questing/changelog.rtf");
		}
	}
}
]]></Code>
		<!--END SettingsViewModel-->
		<!--Stats-->
		<Code File="RunCode" Type="Definition"><![CDATA[
public static class Stats
{
	public static int InsaneCounter { get; set; }

	public static int ItemsDeleted { get; set; }

	public static int ItemsOpened { get; set; }

	public static int ItemsSold { get; set; }

	public static int LongTermStucks { get; set; }

	public static int PlayerReactions { get; set; }

	public static int QuestlogCleanups { get; set; }

	public static int RaresKilled { get; set; }

	public static int ShortTermStucks { get; set; }

	public static TimeSpan TimeSaved { get; set; } = TimeSpan.Zero;

	public static int TimesForceVendored { get; set; }

	public static int TreasuresFound { get; set; }

	public static void OutputToLog()
	{
		if (Settings.Instance.AfkMode)
			FancyLog.WriteBlue(
				"> [AFKMode]:",
				$"\n     Items Deleted		:: {ItemsDeleted}\n     Items Opened		:: {ItemsOpened}\n     Items Sold		:: {ItemsSold}\n     Questlog Cleanups	:: {QuestlogCleanups}\n");

		if (Settings.Instance.UseActiveVendoring)
			FancyLog.WriteBlue("> [Active Vendoring]:", $"\n     Times Force Vendored	:: {TimesForceVendored}\n");

		if (Settings.Instance.CustomLooting)
			FancyLog.WriteBlue("> [Custom Looting]:", $"\n     Time Saved		:: {Honorbuddy.QuestBehaviorCore.Utility.PrettyTime(TimeSaved)}\n");

		if (Settings.Instance.UseAntiStuck)
			FancyLog.WriteBlue(
				"> [Anti Stuck]:",
				$"\n     Short-Term Stucks	:: {ShortTermStucks}\n     Long-Term Stucks	:: {LongTermStucks}\n");

		if (Settings.Instance.HuntRareMobs)
			FancyLog.WriteBlue("> [Rare Killer]:", $"\n     Rares Killed		:: {RaresKilled}\n");

		if (Settings.Instance.FindTreasureChests)
			FancyLog.WriteBlue("> [Treasure Hunter]:", $"\n     Treasures Found	:: {TreasuresFound}\n");

		if (Settings.Instance.SanityEngine)
			FancyLog.WriteBlue("> [Sanity Engine]:", $"\n     Times Went Insane	:: {InsaneCounter}\n");
	}
}
]]></Code>
		<!--END Stats-->
		<!--TreasureHunter-->
		<Code File="RunCode" Type="Definition"><![CDATA[
public static class TreasureHunter
{
	public static bool _treasureFunctionRunning;

	private static readonly List<WoWGuid> _treasureBlacklist = new List<WoWGuid>();

	private static bool _treasureIsLogged;

	private static readonly HashSet<uint> _treasureList = new HashSet<uint>
	{
		2843,
		2844,
		2850,
		181798,
		181800,
		181802,
		207472,
		207473,
		207474,
		207475,
		207476,
		207478,
		207480,
		207484,
		207485,
		207486,
		207487,
		207488,
		207489,
		207492,
		207493,
		207496,
		207512,
		207513,
		207520,
		207528,
		207529,
		207533
	};

	private static Vector3 _treasureLocation;

	private static WoWGameObject _treasurePoi;

	private static LocalPlayer Me => StyxWoW.Me;

	public static async Task<bool> Run()
	{
		if (!Me.IsAlive || Me.IsActuallyInCombat)
			return false;

		if (_treasurePoi == null || !_treasurePoi.IsValid)
		{
			_treasurePoi = ObjectManager.GetObjectsOfType<WoWGameObject>().OrderBy(obj => obj.DistanceSqr).FirstOrDefault(
				obj => !_treasureBlacklist.Contains(obj.Guid)
					   && !BlackspotManager.IsBlackspotted(obj.Location)
					   && _treasureList.Contains(obj.Entry) && obj.CanUse());
			if (_treasurePoi == null)
			{
				_treasureFunctionRunning = false;
				_treasureIsLogged = false;
				_treasureLocation = new Vector3(0, 0, 0);
				return false;
			}
			if (Navigator.LookupPathInfo(_treasurePoi).Navigability != PathNavigability.Navigable)
			{
				_treasureBlacklist.Add(_treasurePoi.Guid);
				FancyLog.WriteBlue(
					"[Treasure Hunter]: ",
					$"Treasure detected near us, but we can't navigate to it!\n	Name     :: {_treasurePoi.Name}\n	Entry     :: {_treasurePoi.Entry}\n	Location :: {_treasurePoi.Location}");
				_treasurePoi = null;
				return false;
			}
			_treasureLocation = _treasurePoi.Location;
			_treasureFunctionRunning = true;
			Stats.TreasuresFound++;
			return true;
		}

		if (!_treasureLocation.Equals(new Vector3(0, 0, 0))
			&& _treasureLocation.DistanceSquared((WoWMovement.ActiveMover ?? StyxWoW.Me).Location) > 5 * 5)
		{
			_treasureFunctionRunning = true;
			TreeRoot.StatusText = $"Moving to interact with treasure: {_treasurePoi.Name}";
			return (await CommonCoroutines.MoveTo(_treasureLocation)).IsSuccessful();
		}

		if (!_treasureIsLogged)
		{
			_treasureIsLogged = true;
			FancyLog.WriteBlue(
				"[Treasure Hunter]: ",
				$"Treasure detected near us!\n	Name     :: {_treasurePoi.Name}\n	Entry     :: {_treasurePoi.Entry}\n	Location :: {_treasurePoi.Location}");
		}

		TreeRoot.StatusText = $"Interacting with treasure: {_treasurePoi.Name}";

		if (_treasurePoi.CanUse())
		{
			_treasureFunctionRunning = true;
			_treasurePoi.Interact();
			return true;
		}

		return false;
	}
}
]]></Code>
		<!--END TreasureHunter-->
	</QuestOrder>
</HBProfile>